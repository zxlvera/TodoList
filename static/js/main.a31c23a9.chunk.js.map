{"version":3,"sources":["Context/index.js","components/AddTodo.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoContext","React","createContext","TodoProvider","props","useState","items","setItems","useEffect","getData","funData","id","uuid","title","complete","a","fetch","response","json","data","Provider","value","addItem","newTodo","completed","markComplete","map","item","delItem","filter","children","AddTodo","useContext","setTitle","onSubmit","e","preventDefault","className","type","name","placeholder","onChange","target","TodoItem","itemStyle","textDecoration","handleChange","style","onClick","key","TodoList","appContext","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NAGMA,EAAcC,IAAMC,gBAEpBC,EAAe,SAACC,GAAW,IAAD,EACJC,mBAAS,IADL,mBACvBC,EADuB,KAChBC,EADgB,KAG9BC,qBAAU,WACRC,MACC,IAEH,IAAMC,EAAU,CACd,CACEC,GAAIC,cACJC,MAAO,wBACPC,UAAU,GAGZ,CACEH,GAAIC,cACJC,MAAO,aACPC,UAAU,GAEZ,CACEH,GAAIC,cACJC,MAAO,4BACPC,UAAU,IAGRL,EAAO,uCAAG,8BAAAM,EAAA,sEACSC,MAAM,qDADf,cACRC,EADQ,gBAEKA,EAASC,OAFd,OAERC,EAFQ,OAGdZ,EAAQ,WAAR,GAASG,GAAT,mBAAoBS,KAHN,2CAAH,qDA8Bb,OACE,kBAACnB,EAAYoB,SAAb,CAAsBC,MAAO,CAC3Bf,QACAgB,QA3BY,SAACT,GACf,IAAMU,EAAU,CACdZ,GAAIC,cACJC,QACAW,WAAW,GAEbjB,EAAS,CAACgB,GAAF,mBAAcjB,MAsBpBmB,aAnBiB,SAACd,GAEpBJ,EAASD,EAAMoB,KAAI,SAAAC,GAIjB,OAHIA,EAAKhB,KAAOA,IACdgB,EAAKH,WAAaG,EAAKH,WAElBG,OAcPC,QATY,SAACjB,GACfJ,EAASD,EAAMuB,QAAO,SAAAF,GAAI,OAAIA,EAAKhB,KAAOA,SAUvCP,EAAM0B,WCvCEC,EAzBC,WAEd,IACQT,EADWU,qBAAWhC,GACtBsB,QAHY,EAKMjB,mBAAS,IALf,mBAKbQ,EALa,KAKNoB,EALM,KAapB,OACE,0BAAMC,SAPa,SAACC,GACpBA,EAAEC,iBACFd,EAAQT,GACRoB,EAAS,KAIqBI,UAAU,aACtC,2BAAOA,UAAU,cACfC,KAAK,OACLC,KAAK,QACLC,YAAY,cACZnB,MAAOR,EACP4B,SAAU,SAAAN,GAAC,OAAIF,EAASE,EAAEO,OAAOrB,YCa1BsB,EAlCE,SAAC,GAAqC,IAAnChB,EAAkC,EAAlCA,KAAMF,EAA4B,EAA5BA,aAAcG,EAAc,EAAdA,QAEhCgB,EAAY,CAChBC,eAAgBlB,EAAKH,UAAY,eAAiB,QAG9CsB,EAAe,WACnBrB,EAAaE,EAAKhB,KAOpB,OACE,yBAAKoC,MAAOH,EAAWP,UAAU,cAC/B,2BAEE,4BAAQA,UAAU,WAChBW,QATW,WACjBpB,EAAQD,EAAKhB,MAQc,yCACtBgB,EAAKH,UACJ,4BAAQa,UAAU,YAAYY,IAAKtB,EAAKhB,GACtCqC,QAASF,GAAc,+CAEzB,4BAAQT,UAAU,YAAYY,IAAKtB,EAAKhB,GACtCqC,QAASF,GAAc,+CAE1BnB,EAAKd,SCTCqC,EAhBE,WACf,IAAMC,EAAanB,qBAAWhC,GACtBM,EAAiC6C,EAAjC7C,MAAOmB,EAA0B0B,EAA1B1B,aAAcG,EAAYuB,EAAZvB,QAE7B,OACEtB,EAAMoB,KAAK,SAAAC,GAAI,OACb,kBAAC,EAAD,CACEsB,IAAKtB,EAAKhB,GACVgB,KAAMA,EACNF,aAAcA,EACdG,QAASA,QCCFwB,EAXH,WAEV,OACE,yBAAKf,UAAU,aACb,wBAAIA,UAAU,UAAd,wBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a31c23a9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nconst TodoContext = React.createContext();\r\n\r\nconst TodoProvider = (props) => {\r\n  const [items, setItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const funData = [\r\n    {\r\n      id: uuid(),\r\n      title: \"Write some tasks here\",\r\n      complete: false\r\n    },\r\n    \r\n    {\r\n      id: uuid(),\r\n      title: \"Created by\",\r\n      complete: false\r\n    },\r\n    {\r\n      id: uuid(),\r\n      title: \"Vera @ github.com/zxlvera\",\r\n      complete: false\r\n    },\r\n  ]\r\n  const getData = async () => {\r\n    const response = await fetch('http://jsonplaceholder.typicode.com/users/1/todos');\r\n    const data = await response.json();\r\n    setItems(funData,...data);\r\n  }\r\n\r\n  const addItem = (title) => {\r\n    const newTodo = {\r\n      id: uuid(),\r\n      title,\r\n      completed: false\r\n    }\r\n    setItems([newTodo, ...items]);\r\n  }\r\n\r\n  const markComplete = (id) => {\r\n    \r\n    setItems(items.map(item => {\r\n      if (item.id === id) {\r\n        item.completed = !item.completed;\r\n      }\r\n      return item;\r\n    } \r\n    ));\r\n  }\r\n\r\n  const delItem = (id) => { \r\n    setItems(items.filter(item => item.id !== id))\r\n  }\r\n\r\n  return (\r\n    <TodoContext.Provider value={{\r\n      items,\r\n      addItem,\r\n      markComplete,\r\n      delItem\r\n    }}>\r\n      {props.children}\r\n    </TodoContext.Provider>\r\n  )\r\n}\r\n\r\nexport { TodoProvider, TodoContext }\r\n","import React, { useContext, useState } from 'react'\r\nimport { TodoContext } from '../Context';\r\n\r\nconst AddTodo = () => {\r\n\r\n  const appContext = useContext(TodoContext);\r\n  const { addItem } = appContext;\r\n\r\n  const [title, setTitle] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addItem(title);\r\n    setTitle('');\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"form__add\">\r\n      <input className=\"form__input\"\r\n        type=\"text\"\r\n        name=\"title\"\r\n        placeholder=\"Add todo...\"\r\n        value={title}\r\n        onChange={e => setTitle(e.target.value)} />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\n\r\nconst TodoItem = ({ item, markComplete, delItem }) => {\r\n\r\n  const itemStyle = {\r\n    textDecoration: item.completed ? 'line-through' : 'none'\r\n  }\r\n\r\n  const handleChange = () => {\r\n    markComplete(item.id);\r\n  }\r\n\r\n  const deleteItem = () => {\r\n    delItem(item.id);\r\n  }\r\n\r\n  return (\r\n    <div style={itemStyle} className=\"list__item\">\r\n      <p>\r\n\r\n        <button className=\"btn__del\"\r\n          onClick={deleteItem}><span>❌</span></button>\r\n        {item.completed ?\r\n          <button className=\"btn__done\" key={item.id}\r\n            onClick={handleChange}><span>🌝</span></button>\r\n          :\r\n          <button className=\"btn__done\" key={item.id}\r\n            onClick={handleChange}><span>😫</span></button>\r\n        }\r\n        {item.title}\r\n\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { useContext } from 'react'\r\nimport TodoItem from '../components/TodoItem';\r\nimport { TodoContext } from '../Context';\r\n\r\nconst TodoList = () => {\r\n  const appContext = useContext(TodoContext);\r\n  const { items, markComplete, delItem } = appContext;\r\n\r\n  return (\r\n    items.map((item => (\r\n      <TodoItem\r\n        key={item.id}\r\n        item={item}\r\n        markComplete={markComplete}\r\n        delItem={delItem}\r\n      />\r\n    )))\r\n  )\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react';\nimport AddTodo from './components/AddTodo';\nimport TodoList from './components/TodoList';\n\nconst App = () => {\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"header\">Todo List with React</h1>\n      <AddTodo />\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { TodoProvider } from './Context/index';\n\nReactDOM.render(\n  <TodoProvider>\n    <App />\n  </TodoProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}